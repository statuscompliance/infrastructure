services:
  ############### MICROSERVICES ###############
  status-backend:
    restart: unless-stopped
    container_name: status-backend
    image: ghcr.io/statuscompliance/status-backend
    ports:
      - "3001:3001"
    healthcheck:
      test: wget -q --spider http://127.0.0.1:3001/api/user
      retries: 15
    environment:
      AI_ORG_ID: ${AI_ORG_ID}
      AI_API_KEY: ${AI_API_KEY}
      USER_STATUS: ${USER_STATUS}
      PASS_STATUS: ${PASS_STATUS}
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      NODE_RED_URL: ${NODE_RED_URL}
      GRAFANA_URL: ${GRAFANA_URL}
      GRAFANA_USER: ${GRAFANA_USER}
      GRAFANA_PASSWORD: ${GRAFANA_PASSWORD}
      GRAFANA_API_KEY: ${GRAFANA_API_KEY}
      API_PREFIX: ${API_PREFIX}
      DRAGONFLY_HOST: ${DRAGONFLY_HOST}
      DRAGONFLY_PORT: ${DRAGONFLY_PORT}
      JWT_SECRET: ${JWT_SECRET}
      REFRESH_JWT_SECRET: ${REFRESH_JWT_SECRET}
      GH_CLIENT_ID: ${GH_CLIENT_ID}
      GH_CLIENT_SECRET: ${GH_CLIENT_SECRET}
      REGISTRY_URL: ${REGISTRY_URL}
      MONGO_URI: ${MONGO_URI}
    depends_on:
      postgres:
        condition: service_healthy
      nodered:
        condition: service_healthy
      dragonfly:
        condition: service_healthy
      mongo-registry:
        condition: service_healthy
    networks:
      - web_network
      - db_network
      - nodered_network
  # ================================================
  status-frontend:
    restart: unless-stopped
    container_name: status-frontend
    image: ghcr.io/statuscompliance/frontend
    environment: 
      - VITE_BASE_URL=${VITE_BASE_URL}
      - VITE_NODE_ENV=${VITE_NODE_ENV}
      - VITE_NODE_RED_URL=${VITE_NODE_RED_URL}
      - VITE_GRAFANA_URL=${VITE_GRAFANA_URL}
    ports:
      - "3000:80"
    networks:
      - web_network
  # ================================================
  nodered:
    restart: unless-stopped
    container_name: node-red-status
    image: ghcr.io/statuscompliance/node-red-status
    user: "0:0"
    ports:
      - "1880:1880"
    environment:
      STATUS_LEDGER_ENDPOINT: ${STATUS_LEDGER_ENDPOINT}
    healthcheck:
      test: curl -f -s http://127.0.0.1:1880
      interval: 5s
      timeout: 10s
      retries: 5
    volumes:
      - ./node-red-status:/root/.node-red
      - ./settings.js:/root/.node-red/settings.js
    networks:
      - web_network
      - nodered_network
  # ================================================
  # ledger: # This service is experimental
    # restart: no
    # container_name: ledger
    # image: statuscompliance/blockchain
    # privileged: true
    # ports:
    #   - 4000:80
    # volumes:
    #   - /Users/alvarobernal/Desktop/LSI/blockchain/app/blockchain-conversion:/chaincodes
    # networks:
    #   - nodered_network
  # ================================================
  postgres:
    restart: unless-stopped
    image: postgres:17.2
    container_name: postgres
    networks:
      - db_network
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: pg_isready -U ${DB_USER}
      interval: 10s
      timeout: 10s
      retries: 10
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
  # ================================================
  grafana:
    restart: unless-stopped
    image: grafana/grafana-oss
    container_name: grafana
    ports:
      - "3100:3000"
    networks:
      - db_network
    environment:
      - GF_SECURITY_ADMIN_USER=${USER_STATUS}
      - GF_SECURITY_ADMIN_PASSWORD=${PASS_STATUS}
      - GF_SECURITY_ALLOW_EMBEDDING=true
    volumes:
      - grafana:/var/lib/grafana
      - ./config:/etc/grafana/provisioning/datasources
    mem_limit: 400m
    depends_on:
      postgres:
        condition: service_healthy
  # ================================================
  dragonfly:
    restart: unless-stopped
    image: ghcr.io/dragonflydb/dragonfly
    container_name: dragonfly
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    ports:
      - '6379:6379'
    networks:
      - db_network
    volumes:
      - dragonfly-data:/data/dragonfly
  # ================================================
  director:
    container_name: director
    image: 'governify/director:develop'
    environment:
      - NODE_ENV=production
      - PORT=80
      - GOV_INFRASTRUCTURE=./infrastructure.yaml
    ports:
      - '5800:80'
    healthcheck:
      test: curl -f http://localhost:80/info
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - db_network
    mem_limit: 400m
    restart: 'unless-stopped'
  # ================================================
  registry:
    container_name: registry
    image: 'governify/registry:PR.30'
    environment:
      - NODE_ENV=development
      - PORT=80
      - GOV_INFRASTRUCTURE=./infrastructure.yaml
      - GOV_LOG_LEVEL=debug
      - MONGOPASS=${MONGOPASS}
      - MONGOADMIN=${MONGOADMIN}
      - HTTPS_SERVER=${HTTPS_SERVER}
      - OASTLM_MODULE_DISABLED=${OASTLM_MODULE_DISABLED}
    volumes:
      - '../logs/registry:/opt/app/logs'
      - '../static:/opt/app/public/static'
    ports:
      - '5400:80'
    depends_on:
      - mongo-registry
    networks:
      - db_network
    mem_limit: 400m
    restart: 'unless-stopped'
  # ================================================
  mongo-registry:
    container_name: mongo-registry
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGOADMIN}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGOPASS}
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    volumes:
      - 'registry-data:/data/db'
    ports:
      - "5001:27017"
    networks:
      - db_network
    mem_limit: 2000m
    restart: 'unless-stopped'

networks:
  db_network:
    driver: bridge
  web_network:
    driver: bridge
  nodered_network:
    driver: bridge

volumes:
  dragonfly-data:
  registry-data:
  nodered:
    name: node-red-status
  postgres:
  grafana:
